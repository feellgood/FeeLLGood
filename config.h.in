/** \file config.h
config.h is generated by cmake from config.h.in
*/

#ifndef CONFIG_H
#define CONFIG_H

#include <cmath>
#include <string>

const std::string feellgood_version = "@FEELLGOOD_VERSION@"; /**< human readable version */

/* macros for messages and errors */
#ifdef LIBRARY
#    include <stdexcept>  // for runtime_error
#    include <cerrno>
#    include <system_error>

#    define SYSTEM_ERROR                                   \
            {                                              \
            throw system_error(errno, generic_category()); \
            } /**< macro for error handling if feellgood compiled as a library */
#else

#    define SYSTEM_ERROR \
            {            \
            exit(1);     \
            } /**< macro to exit executable on some errors */
#endif

const double mu0 = 1.25663706127e-6;                /**< T A^-1 m */
const double gamma0 = 1.76085962784e11 * mu0;       /**< s^-1 A^-1 m */
const double PLANCKS_H = 6.62607015e-34;            /**< kg m^2 / s */
const double PLANCKS_HBAR = PLANCKS_H / (2 * M_PI); /**< kg m^2 / s */
const double CHARGE_ELECTRON = 1.602176634e-19;     /**< C */
const double MASS_ELECTRON = 9.1093837139e-31;      /**< kg */
const double BOHRS_MUB = CHARGE_ELECTRON * PLANCKS_HBAR / (2. * MASS_ELECTRON); /**< C.m^2 */

/** set execution policy */
#cmakedefine01 ENABLE_SEQ

#if ENABLE_SEQ
    #define EXEC_POL std::execution::seq /**< sequential execution policy */
#else
    #define EXEC_POL std::execution::par /**< parallel execution policy */
#endif

/** do an extra orthonormalization of the (u0, ep, eq) basis in order to minimize the rounding
 * errors */
#define PARANOID_ORTHONORMALIZATION false

/** theta of the theta integration scheme in time */
#define THETA 0.5

/** this constant is depending on the mesh, \f$ \epsilon \f$ is a small value, used to modify
 * slightly J in (tet|facette).integrales */
#define EPSILON 1e-40
// should not be fixed but computed with an analysis of the mesh

/** USER_TOL is tolerance for 'unit' vector input values : if abs(norm(x)-1) < USER_TOL then x is a
 * unit vector */
#define USER_TOL 1e-4

#endif  // CONFIG_H
