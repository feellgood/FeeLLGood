#!/usr/bin/env python3

import h5py
import numpy as np
import sys
import os

def buildSolMetadata(solDataset):
    s = solDataset.attrs['comments']
    s += "## feeLLGood version: " + solDataset.attrs['feeLLGood version'] + '\n'
    s += "## settings file: " + solDataset.attrs['settings file'] + '\n'
    s += "## time: " + str(solDataset.attrs['time']) + '\n'
    s += "## columns: " + solDataset.attrs['columns'] + '\n'
    return s

def writeFile(fileName,whatToWrite,metadata):
    if type(whatToWrite)==str:
        with open(fileName,'w') as f:
            f.write(metadata)
            f.write(whatToWrite)
            f.close()
    else:
        np.savetxt(fileName,whatToWrite,delimiter='\t',newline='\n',header=metadata,comments='')

def writeSolFile(fileName,dataSolFile):
    writeFile( fileName, dataSolFile, buildSolMetadata(dataSolFile))

def viewGroup(h5file,groupName):
    print(groupName)
    for a in h5file[groupName].attrs:
        print("  a:",a)
    for dataset in h5file[groupName]:
        print("  d:",dataset)
        for a in h5file[groupName][dataset].attrs:
            print("    a:",a,':',h5file[groupName][dataset].attrs[a])

def view(h5file,groupName):
    if (groupName != 'emptyGroupName') and (groupName in h5file):
        viewGroup(h5file,groupName)
    else:
        for g in h5file.keys():
            viewGroup(h5file,g)
    exit(1)

def extractAll(h5file,groupName,baseName):
    dataEvolFile = h5file[groupName].get('evolFile')
    writeFile( baseName +".evol", dataEvolFile, dataEvolFile.attrs['metadata'])
    writeFile( baseName +".msh", h5file[groupName].attrs['mesh'], "")
    writeFile( baseName +".yml", h5file[groupName].attrs['settings'], "")
    list_dset = []
    for dset in h5file[groupName]:
        if dset != 'evolFile':
            list_dset.append(dset)
    for d in list_dset:
        writeSolFile(baseName + d + ".sol", h5file[groupName].get(d))

def get_params():
    import argparse
    description = 'extract from hdf5 mesh, feellgood settings(yaml), .evol or .sol file(s)'
    epilogue = '''
 extracts data from hdf5 file and writes file(s) from hdf5 feellgood input file
   '''
    parser = argparse.ArgumentParser(description=description, epilog=epilogue,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('h5FileName',help='an input hdf5 file name')
    parser.add_argument('-g','--groupname',help='group name where to extract',default='emptyGroupName')
    parser.add_argument('-b','--basename', help='a base name for output file(s)',default='emptyBaseName')
    parser.add_argument('--view',action='store_true',help='view in standard output the group content')
    parser.add_argument('--version',action='version',version= __version__,help='show the version number')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-w','--what',metavar='what',type=str, help='what to extract',default='undefined')
    
    args = parser.parse_args()
    return vars(args)
    
def main():
    inputs = get_params()
    if not(os.path.exists(inputs['h5FileName'])):
        print("error: file "+ inputs['h5FileName'] + " not found" )
        exit(1)
    else:
        fileName = inputs['h5FileName']
        f = h5py.File(fileName,'r')

        if ((inputs['groupname'] == 'emptyGroupName')or(inputs['groupname'] in f.keys())) and inputs['view']:
            view(f,inputs['groupname'])
        elif not(inputs['groupname'] in f.keys()):
            print("error: group " + inputs['groupname'] + " does not exist in file " + inputs['h5FileName'] )
            exit(1)

        if inputs['what'] == 'evol':
            dataEvolFile = f[ inputs['groupname']].get('evolFile')
            writeFile( inputs['basename']+".evol", dataEvolFile, dataEvolFile.attrs['metadata'])
        elif inputs['what'] == 'mesh':
            writeFile( inputs['basename']+".msh", f[ inputs['groupname']].attrs['mesh'], "")
        elif inputs['what'] == 'settings':
            writeFile( inputs['basename']+".yml", f[ inputs['groupname']].attrs['settings'], "")
        elif inputs['what'] == 'datasets':
            list_dset = []
            for dset in f[ inputs['groupname']]:
                if dset != 'evolFile':
                    list_dset.append(dset)
            for d in list_dset:
                writeSolFile( inputs['basename']+d+".sol", f[ inputs['groupname']].get(d))
        elif inputs['what'] in f[ inputs['groupname']]:
            writeSolFile( inputs['basename']+inputs['what']+".sol", f[ inputs['groupname']].get(inputs['what']) )
        else:# extract all
            extractAll(f,inputs['groupname'],inputs['basename'])

        f.close()

__version__ = '1.0.0'
if __name__ == "__main__":
    main()

