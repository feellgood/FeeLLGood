#!/usr/bin/env python3

description = '''
Combine a mesh file (which has the node coordinates) with a feeLLGood’s
‘.sol’ file (which has the node's reduced magnetizations or electric
potentials). Output the .sol physical quantities (magnetization or
potential) as a function of position, in a tab-separated-values file:
(x, y, z, physical_quantity...).
'''

import sys
import argparse
from feellgood.core import mesh

# Parse the command line.
parser = argparse.ArgumentParser(description=description)
parser.add_argument('-o', '--output',
    help='name of the output file, defaults to stdout')
parser.add_argument('mesh_file',
    help='name of the mesh file, in GMSH ‘MSH 2’ format')
parser.add_argument('sol_file',
    help='name of a matching feeLLGood ‘.sol’ file')
args = parser.parse_args()

# Get the node positions from the mesh file.
nodes = mesh(args.mesh_file).Nodes

# Get the magnetizations from the sol file.
sol = open(args.sol_file, 'r')
comments = []  # comments and metadata
phys = []  # physical quantities associated to the nodes
for line in sol:
    if line.startswith("## columns:"):  # column labels
        line = line.partition('\t')[2]  # remove "## columns: index\t"
        comments.append("## columns: x\ty\tz\t" + line)
    elif line.startswith('#'):  # other comments and metadata
            comments.append(line)
    else:  # magnetization data
        fields = line.split()
        fields.pop(0)  # remove `index' field
        phys.append(list(map(float, fields)))

# Open the output file.
if args.output:
    output = open(args.output, 'w')
else:
    output = sys.stdout

# Output the magnetization as a function of position.
for line in comments:
    output.write(line)
for i in range(0, len(nodes)):
    fields = list(nodes[i]) + phys[i]
    print('\t'.join(map(str, fields)), file=output)

# Make sure the output file is flushed to disk.
output.close()
