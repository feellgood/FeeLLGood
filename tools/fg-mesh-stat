#!/usr/bin/env python3

# this program requires python3-gmsh and python3-termcolor packages
# it is adapted from https://gitlab.onelab.info/gmsh/gmsh/blob/gmsh_4_9_5/tutorials/python/x1.py

import sys
import os
import numpy as np
from termcolor import colored

def gmsh_init(verbose=True):
    """
    initializations of gmsh.
    """
    import gmsh
    global gmsh
    gmsh.initialize()
    gmsh.option.setNumber("General.Terminal",verbose) # to silent(or not) gmsh

def get_params():
    import argparse
    description = 'mesh statistics'
    epilogue = '''
    list all surface and volume regions of a gmsh mesh. Give their name and indices, their surface or volume, and some global statistics 
    '''
    parser = argparse.ArgumentParser(description=description, epilog=epilogue, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-v','--verbose', help='verbose mode, print all inputs', action="store_true")
    parser.add_argument('--version',action='version',version= __version__,help='show the version number')
    parser.add_argument("meshFileName", help='input mesh file (gmsh format)')
    args = parser.parse_args()
    return args

def surf_triangle(pts,i_a,i_b,i_c):
    '''
    pts is a 1D array: the list of the nodes coordinates [x_0,y_0,z_0,..,x_i,y_i,z_i, .. ]
    zero-based indices
    i_a, i_b, i_c are indices of points a,b,c defining a triangle
    '''
    a = np.array([ pts[3*i_a],pts[3*i_a+1],pts[3*i_a+2] ])
    b = np.array([ pts[3*i_b],pts[3*i_b+1],pts[3*i_b+2] ])
    c = np.array([ pts[3*i_c],pts[3*i_c+1],pts[3*i_c+2] ])
    return 0.5*np.linalg.norm( np.cross(b-a,c-a) )

def vol_tetrahedron(pts,i_a,i_b,i_c,i_d):
    '''
    pts is a 1D array: the list of the nodes coordinates [x_0,y_0,z_0,..,x_i,y_i,z_i, .. ]
    zero-based indices
    i_a, i_b, i_c, i_d are indices of points a,b,c,d defining a tetrahedron
    '''
    a = np.array([ pts[3*i_a],pts[3*i_a+1],pts[3*i_a+2] ])
    b = np.array([ pts[3*i_b],pts[3*i_b+1],pts[3*i_b+2] ])
    c = np.array([ pts[3*i_c],pts[3*i_c+1],pts[3*i_c+2] ])
    d = np.array([ pts[3*i_d],pts[3*i_d+1],pts[3*i_d+2] ])
    return abs(np.dot(np.cross(b-a,c-a), d-a))/6.0

def readAllNodes():
    # Get all the mesh nodes
    nodeTags, nodeCoords, nodeParams = gmsh.model.mesh.getNodes()
    node = np.ndarray( shape=(len(nodeTags),3) )
    for i in range(len(nodeTags)-1):
        j = int(nodeTags[i]) - 1
        node[j] = np.array([ nodeCoords[3*i], nodeCoords[3*i+1], nodeCoords[3*i+2] ])
    return node

def Nform(node,dim,tag):
    name = ""
    val = 0
    # Get the mesh elements for the entity (dim, tag):
    elemTypes, elemTags, elemNodeTags = gmsh.model.mesh.getElements(dim, tag)
    if dim == 2:
        name = "surface"
        triangles = np.array(elemNodeTags).reshape(-1,3)
        #for t in triangles:
        #    val += surf_triangle(node,int(t[0]-1),int(t[1]-1),int(t[2]-1)) # wrong indices here
    elif dim == 3:
        name = "volume"
        tetras = np.array(elemNodeTags).reshape(-1,4)
        #for t in tetras:
        #    val += vol_tetrahedron(node,int(t[0]-1),int(t[1]-1),int(t[2]-1),int(t[3]-1))  # wrong indices here
    return [name,val]

def entity_str_info(node,dim,tag,verbose):
    my_str = ""
    type = gmsh.model.getType(dim, tag)
    name = gmsh.model.getEntityName(dim, tag)
    if len(name):
        my_str += "\t" + type + "named " + name + ", indexed #" +  str(tag)
    else:
        my_str += "\t" + type + " unnamed, indexed #" +  str(tag)
    physicalTags = gmsh.model.getPhysicalGroupsForEntity(dim, tag)
    if len(physicalTags):
        for p in physicalTags:
            n = gmsh.model.getPhysicalName(dim, p)
            my_str += ", belongs to physical group named " + colored(n,'cyan') + ', indexed ' + colored(str(p),'yellow')
            [Nform_name,val] = Nform(node,dim,tag)
            my_str += ", " + Nform_name + "= " + str(val)
    # Get the mesh nodes for the entity (dim, tag):
    nodeTags, nodeCoords, nodeParams = gmsh.model.mesh.getNodes(dim, tag)
    # Get the mesh elements for the entity (dim, tag):
    elemTypes, elemTags, elemNodeTags = gmsh.model.mesh.getElements(dim, tag)
    # * Number of mesh nodes and elements:
    if(verbose):
        numElem = sum(len(i) for i in elemTags)
        my_str += ", has " + str(len(nodeTags)) + " nodes and " + str(numElem) + " elements "
        # * List all types of elements making up the mesh of the entity:
        for t in elemTypes:
            name, dim, order, numv, parv, _ = gmsh.model.mesh.getElementProperties(t)
            my_str += "(" + name + ", order " + str(order) + ')\n'
    return my_str

def test():
    pts = [0,0,0,1,0,0,0,1,0,0,0,1]
    i_a = 0
    i_b = 1
    i_c = 2
    i_d = 3
    v= vol_tetrahedron(pts,i_a,i_b,i_c,i_d)
    print("v=",v)

def main():
    test()
    args = get_params()
    gmsh_init(args.verbose)
    gmsh.open(args.meshFileName)
    if gmsh.model.getDimension() != 3:
        print(colored("Warning:",'red'),args.meshFileName,"is not a 3D mesh.")
        exit()
    if not args.verbose:
        print("Input 3D mesh file", colored(args.meshFileName,'green'), "opened, model name:",gmsh.model.getCurrent())
    else:
        print("Model name:",gmsh.model.getCurrent())
    entities = gmsh.model.getEntities()
    node = readAllNodes() #(dim,tag)
    nb_2D_entities = 0
    nb_3D_entities = 0
    str_2D_entities = ""
    str_3D_entities = ""
    
    for e in entities:
        dim = e[0]
        tag = e[1]
        if dim <= 1:
            continue
        elif dim == 2:
            nb_2D_entities += 1
            str_2D_entities += entity_str_info(node,dim,tag,args.verbose)
        elif dim == 3:
            nb_3D_entities += 1
            str_3D_entities += entity_str_info(node,dim,tag,args.verbose)

    print(len(entities),"entities, including",nb_2D_entities,"2D entities and",nb_3D_entities,"3D entities")
    print(colored("2D entities:\n",'green'),str_2D_entities)
    print(colored("3D entities:\n",'green'),str_3D_entities)
    gmsh.finalize()

__version__ = "0.0.0"
if __name__ == "__main__":
    main()
